.TH "jaco_msgs.srv._SetForceControlParams.SetForceControlParamsRequest" 3 "Thu Mar 3 2016" "Version 1.0.1" "Kinova-ROS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jaco_msgs.srv._SetForceControlParams.SetForceControlParamsRequest \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits Message\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, args, kwds)"
.br
.ti -1c
.RI "def \fBdeserialize\fP (self, str)"
.br
.ti -1c
.RI "def \fBdeserialize_numpy\fP (self, str, numpy)"
.br
.ti -1c
.RI "def \fBserialize\fP (self, buff)"
.br
.ti -1c
.RI "def \fBserialize_numpy\fP (self, buff, numpy)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBdamping_angular\fP"
.br
.ti -1c
.RI "\fBdamping_linear\fP"
.br
.ti -1c
.RI "\fBforce_max_angular\fP"
.br
.ti -1c
.RI "\fBforce_max_linear\fP"
.br
.ti -1c
.RI "\fBforce_min_angular\fP"
.br
.ti -1c
.RI "\fBforce_min_linear\fP"
.br
.ti -1c
.RI "\fBinertia_angular\fP"
.br
.ti -1c
.RI "\fBinertia_linear\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "def \fB_get_types\fP (self)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "list \fB__slots__\fP = ['\fBinertia_linear\fP','\fBinertia_angular\fP','\fBdamping_linear\fP','\fBdamping_angular\fP','\fBforce_min_linear\fP','\fBforce_min_angular\fP','\fBforce_max_linear\fP','\fBforce_max_angular\fP']"
.br
.ti -1c
.RI "string \fB_full_text\fP"
.br
.ti -1c
.RI "bool \fB_has_header\fP = False"
.br
.ti -1c
.RI "string \fB_md5sum\fP = '5c0999be3d1c60dba47ea0b2fd08231e'"
.br
.ti -1c
.RI "list \fB_slot_types\fP = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']"
.br
.ti -1c
.RI "string \fB_type\fP = 'jaco_msgs/\fBSetForceControlParamsRequest\fP'"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.__init__ ( self,  args,  kwds)"

.PP
.nf
Constructor. Any message fields that are implicitly/explicitly
set to None will be assigned a default value. The recommend
use is keyword arguments as this is more robust to future message
changes.  You cannot mix in-order arguments and keyword arguments.

The available fields are:
   inertia_linear,inertia_angular,damping_linear,damping_angular,force_min_linear,force_min_angular,force_max_linear,force_max_angular

:param args: complete set of field values, in .msg order
:param kwds: use keyword arguments corresponding to message field names
to set specific fields.

.fi
.PP
 
.PP
.nf
33   def __init__(self, *args, **kwds):
34     """
35     Constructor\&. Any message fields that are implicitly/explicitly
36     set to None will be assigned a default value\&. The recommend
37     use is keyword arguments as this is more robust to future message
38     changes\&.  You cannot mix in-order arguments and keyword arguments\&.
39 
40     The available fields are:
41        inertia_linear,inertia_angular,damping_linear,damping_angular,force_min_linear,force_min_angular,force_max_linear,force_max_angular
42 
43     :param args: complete set of field values, in \&.msg order
44     :param kwds: use keyword arguments corresponding to message field names
45     to set specific fields\&.
46     """
47     if args or kwds:
48       super(SetForceControlParamsRequest, self)\&.__init__(*args, **kwds)
49       #message fields cannot be None, assign default values for those that are
50       if self\&.inertia_linear is None:
51         self\&.inertia_linear = geometry_msgs\&.msg\&.Vector3()
52       if self\&.inertia_angular is None:
53         self\&.inertia_angular = geometry_msgs\&.msg\&.Vector3()
54       if self\&.damping_linear is None:
55         self\&.damping_linear = geometry_msgs\&.msg\&.Vector3()
56       if self\&.damping_angular is None:
57         self\&.damping_angular = geometry_msgs\&.msg\&.Vector3()
58       if self\&.force_min_linear is None:
59         self\&.force_min_linear = geometry_msgs\&.msg\&.Vector3()
60       if self\&.force_min_angular is None:
61         self\&.force_min_angular = geometry_msgs\&.msg\&.Vector3()
62       if self\&.force_max_linear is None:
63         self\&.force_max_linear = geometry_msgs\&.msg\&.Vector3()
64       if self\&.force_max_angular is None:
65         self\&.force_max_angular = geometry_msgs\&.msg\&.Vector3()
66     else:
67       self\&.inertia_linear = geometry_msgs\&.msg\&.Vector3()
68       self\&.inertia_angular = geometry_msgs\&.msg\&.Vector3()
69       self\&.damping_linear = geometry_msgs\&.msg\&.Vector3()
70       self\&.damping_angular = geometry_msgs\&.msg\&.Vector3()
71       self\&.force_min_linear = geometry_msgs\&.msg\&.Vector3()
72       self\&.force_min_angular = geometry_msgs\&.msg\&.Vector3()
73       self\&.force_max_linear = geometry_msgs\&.msg\&.Vector3()
74       self\&.force_max_angular = geometry_msgs\&.msg\&.Vector3()
75 
.fi
.SH "Member Function Documentation"
.PP 
.SS "def jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&._get_types ( self)\fC [private]\fP"

.PP
.nf
internal API method

.fi
.PP
 
.PP
.nf
76   def _get_types(self):
77     """
78     internal API method
79     """
80     return self\&._slot_types
81 
.fi
.SS "def jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize ( self,  str)"

.PP
.nf
unpack serialized message in str into this message instance
:param str: byte array of serialized message, ``str``

.fi
.PP
 
.PP
.nf
93   def deserialize(self, str):
94     """
95     unpack serialized message in str into this message instance
96     :param str: byte array of serialized message, ``str``
97     """
98     try:
99       if self\&.inertia_linear is None:
100         self\&.inertia_linear = geometry_msgs\&.msg\&.Vector3()
101       if self\&.inertia_angular is None:
102         self\&.inertia_angular = geometry_msgs\&.msg\&.Vector3()
103       if self\&.damping_linear is None:
104         self\&.damping_linear = geometry_msgs\&.msg\&.Vector3()
105       if self\&.damping_angular is None:
106         self\&.damping_angular = geometry_msgs\&.msg\&.Vector3()
107       if self\&.force_min_linear is None:
108         self\&.force_min_linear = geometry_msgs\&.msg\&.Vector3()
109       if self\&.force_min_angular is None:
110         self\&.force_min_angular = geometry_msgs\&.msg\&.Vector3()
111       if self\&.force_max_linear is None:
112         self\&.force_max_linear = geometry_msgs\&.msg\&.Vector3()
113       if self\&.force_max_angular is None:
114         self\&.force_max_angular = geometry_msgs\&.msg\&.Vector3()
115       end = 0
116       _x = self
117       start = end
118       end += 192
119       (_x\&.inertia_linear\&.x, _x\&.inertia_linear\&.y, _x\&.inertia_linear\&.z, _x\&.inertia_angular\&.x, _x\&.inertia_angular\&.y, _x\&.inertia_angular\&.z, _x\&.damping_linear\&.x, _x\&.damping_linear\&.y, _x\&.damping_linear\&.z, _x\&.damping_angular\&.x, _x\&.damping_angular\&.y, _x\&.damping_angular\&.z, _x\&.force_min_linear\&.x, _x\&.force_min_linear\&.y, _x\&.force_min_linear\&.z, _x\&.force_min_angular\&.x, _x\&.force_min_angular\&.y, _x\&.force_min_angular\&.z, _x\&.force_max_linear\&.x, _x\&.force_max_linear\&.y, _x\&.force_max_linear\&.z, _x\&.force_max_angular\&.x, _x\&.force_max_angular\&.y, _x\&.force_max_angular\&.z,) = _struct_24d\&.unpack(str[start:end])
120       return self
121     except struct\&.error as e:
122       raise genpy\&.DeserializationError(e) #most likely buffer underfill
123 
124 
.fi
.SS "def jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy ( self,  str,  numpy)"

.PP
.nf
unpack serialized message in str into this message instance using numpy for array types
:param str: byte array of serialized message, ``str``
:param numpy: numpy python module

.fi
.PP
 
.PP
.nf
137   def deserialize_numpy(self, str, numpy):
138     """
139     unpack serialized message in str into this message instance using numpy for array types
140     :param str: byte array of serialized message, ``str``
141     :param numpy: numpy python module
142     """
143     try:
144       if self\&.inertia_linear is None:
145         self\&.inertia_linear = geometry_msgs\&.msg\&.Vector3()
146       if self\&.inertia_angular is None:
147         self\&.inertia_angular = geometry_msgs\&.msg\&.Vector3()
148       if self\&.damping_linear is None:
149         self\&.damping_linear = geometry_msgs\&.msg\&.Vector3()
150       if self\&.damping_angular is None:
151         self\&.damping_angular = geometry_msgs\&.msg\&.Vector3()
152       if self\&.force_min_linear is None:
153         self\&.force_min_linear = geometry_msgs\&.msg\&.Vector3()
154       if self\&.force_min_angular is None:
155         self\&.force_min_angular = geometry_msgs\&.msg\&.Vector3()
156       if self\&.force_max_linear is None:
157         self\&.force_max_linear = geometry_msgs\&.msg\&.Vector3()
158       if self\&.force_max_angular is None:
159         self\&.force_max_angular = geometry_msgs\&.msg\&.Vector3()
160       end = 0
161       _x = self
162       start = end
163       end += 192
164       (_x\&.inertia_linear\&.x, _x\&.inertia_linear\&.y, _x\&.inertia_linear\&.z, _x\&.inertia_angular\&.x, _x\&.inertia_angular\&.y, _x\&.inertia_angular\&.z, _x\&.damping_linear\&.x, _x\&.damping_linear\&.y, _x\&.damping_linear\&.z, _x\&.damping_angular\&.x, _x\&.damping_angular\&.y, _x\&.damping_angular\&.z, _x\&.force_min_linear\&.x, _x\&.force_min_linear\&.y, _x\&.force_min_linear\&.z, _x\&.force_min_angular\&.x, _x\&.force_min_angular\&.y, _x\&.force_min_angular\&.z, _x\&.force_max_linear\&.x, _x\&.force_max_linear\&.y, _x\&.force_max_linear\&.z, _x\&.force_max_angular\&.x, _x\&.force_max_angular\&.y, _x\&.force_max_angular\&.z,) = _struct_24d\&.unpack(str[start:end])
165       return self
166     except struct\&.error as e:
167       raise genpy\&.DeserializationError(e) #most likely buffer underfill
168 
.fi
.SS "def jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.serialize ( self,  buff)"

.PP
.nf
serialize message into buffer
:param buff: buffer, ``StringIO``

.fi
.PP
 
.PP
.nf
82   def serialize(self, buff):
83     """
84     serialize message into buffer
85     :param buff: buffer, ``StringIO``
86     """
87     try:
88       _x = self
89       buff\&.write(_struct_24d\&.pack(_x\&.inertia_linear\&.x, _x\&.inertia_linear\&.y, _x\&.inertia_linear\&.z, _x\&.inertia_angular\&.x, _x\&.inertia_angular\&.y, _x\&.inertia_angular\&.z, _x\&.damping_linear\&.x, _x\&.damping_linear\&.y, _x\&.damping_linear\&.z, _x\&.damping_angular\&.x, _x\&.damping_angular\&.y, _x\&.damping_angular\&.z, _x\&.force_min_linear\&.x, _x\&.force_min_linear\&.y, _x\&.force_min_linear\&.z, _x\&.force_min_angular\&.x, _x\&.force_min_angular\&.y, _x\&.force_min_angular\&.z, _x\&.force_max_linear\&.x, _x\&.force_max_linear\&.y, _x\&.force_max_linear\&.z, _x\&.force_max_angular\&.x, _x\&.force_max_angular\&.y, _x\&.force_max_angular\&.z))
90     except struct\&.error as se: self\&._check_types(struct\&.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
91     except TypeError as te: self\&._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))
92 
.fi
.SS "def jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.serialize_numpy ( self,  buff,  numpy)"

.PP
.nf
serialize message with numpy array types into buffer
:param buff: buffer, ``StringIO``
:param numpy: numpy python module

.fi
.PP
 
.PP
.nf
125   def serialize_numpy(self, buff, numpy):
126     """
127     serialize message with numpy array types into buffer
128     :param buff: buffer, ``StringIO``
129     :param numpy: numpy python module
130     """
131     try:
132       _x = self
133       buff\&.write(_struct_24d\&.pack(_x\&.inertia_linear\&.x, _x\&.inertia_linear\&.y, _x\&.inertia_linear\&.z, _x\&.inertia_angular\&.x, _x\&.inertia_angular\&.y, _x\&.inertia_angular\&.z, _x\&.damping_linear\&.x, _x\&.damping_linear\&.y, _x\&.damping_linear\&.z, _x\&.damping_angular\&.x, _x\&.damping_angular\&.y, _x\&.damping_angular\&.z, _x\&.force_min_linear\&.x, _x\&.force_min_linear\&.y, _x\&.force_min_linear\&.z, _x\&.force_min_angular\&.x, _x\&.force_min_angular\&.y, _x\&.force_min_angular\&.z, _x\&.force_max_linear\&.x, _x\&.force_max_linear\&.y, _x\&.force_max_linear\&.z, _x\&.force_max_angular\&.x, _x\&.force_max_angular\&.y, _x\&.force_max_angular\&.z))
134     except struct\&.error as se: self\&._check_types(struct\&.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
135     except TypeError as te: self\&._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))
136 
.fi
.SH "Member Data Documentation"
.PP 
.SS "list jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.__slots__ = ['\fBinertia_linear\fP','\fBinertia_angular\fP','\fBdamping_linear\fP','\fBdamping_angular\fP','\fBforce_min_linear\fP','\fBforce_min_angular\fP','\fBforce_max_linear\fP','\fBforce_max_angular\fP']\fC [static]\fP, \fC [private]\fP"

.SS "string jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&._full_text\fC [static]\fP, \fC [private]\fP"
\fBInitial value:\fP
.PP
.nf
1 = """geometry_msgs/Vector3 inertia_linear
2 geometry_msgs/Vector3 inertia_angular
3 geometry_msgs/Vector3 damping_linear
4 geometry_msgs/Vector3 damping_angular
5 geometry_msgs/Vector3 force_min_linear
6 geometry_msgs/Vector3 force_min_angular
7 geometry_msgs/Vector3 force_max_linear
8 geometry_msgs/Vector3 force_max_angular
9 
10 ================================================================================
11 MSG: geometry_msgs/Vector3
12 # This represents a vector in free space\&. 
13 
14 float64 x
15 float64 y
16 float64 z
17 """
.fi
.SS "bool jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&._has_header = False\fC [static]\fP, \fC [private]\fP"

.SS "string jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&._md5sum = '5c0999be3d1c60dba47ea0b2fd08231e'\fC [static]\fP, \fC [private]\fP"

.SS "list jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&._slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&._get_types()\&.
.SS "string jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&._type = 'jaco_msgs/\fBSetForceControlParamsRequest\fP'\fC [static]\fP, \fC [private]\fP"

.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.damping_angular"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.damping_linear"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.force_max_angular"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.force_max_linear"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.force_min_angular"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.force_min_linear"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.inertia_angular"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.inertia_linear"

.PP
Referenced by jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.__init__(), jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize(), and jaco_msgs\&.srv\&._SetForceControlParams\&.SetForceControlParamsRequest\&.deserialize_numpy()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Kinova-ROS from the source code\&.
