.TH "goal_generators" 3 "Thu Mar 3 2016" "Version 1.0.1" "Kinova-ROS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
goal_generators \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "def \fBjoint_angles_from_file\fP (filepath)"
.br
.ti -1c
.RI "def \fBposes_from_file\fP (filepath)"
.br
.ti -1c
.RI "def \fBrandom_jaco_finger_positions\fP (n_positions=1)"
.br
.ti -1c
.RI "def \fBrandom_joint_angles_generator\fP (n_poses=1)"
.br
.ti -1c
.RI "def \fBrandom_mico_finger_positions\fP (n_positions=1)"
.br
.ti -1c
.RI "def \fBrandom_pose_generator\fP (n_poses=1)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBn_fingers\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "def goal_generators\&.joint_angles_from_file ( filepath)"

.PP
.nf
A generator that yields joint angles from file.
.fi
.PP
 
.PP
.nf
35 def joint_angles_from_file(filepath):
36     """A generator that yields joint angles from file\&."""
37     with open(filepath) as f:
38         for line in f\&.readlines():
39             if len(line) > 10:
40                 yield [float(n) for n in line\&.strip('\n')\&.split()[:6]]
41 
42 
.fi
.SS "def goal_generators\&.poses_from_file ( filepath)"

.PP
.nf
A generator that yields poses from file, position: [x,y,z] orientation: [x,y,z,w].
.fi
.PP
 
.PP
.nf
12 def poses_from_file(filepath):
13     """A generator that yields poses from file, position: [x,y,z] orientation: [x,y,z,w]\&."""
14     with open(filepath) as f:
15         for line in f\&.readlines():
16             if len(line) > 10:
17                 vals = [float(n) for n in line\&.strip('\n')\&.split()[:7]]
18                 mag = np\&.sqrt(sum(np\&.power(vals[3:], 2)))
19                 yield vals[:3], vals[3:] / mag
20 
21 
.fi
.SS "def goal_generators\&.random_jaco_finger_positions ( n_positions = \fC1\fP)"

.PP
.nf

.fi
.PP
 
.PP
.nf
43 def random_jaco_finger_positions(n_positions=1):
44     """ """
45     for i in xrange(n_positions):
46         # finger min/max range: [0\&.25 to 56]?
47         yield np\&.random\&.random(3) * 55\&.75 + 0\&.25
48 
49 
.fi
.SS "def goal_generators\&.random_joint_angles_generator ( n_poses = \fC1\fP)"

.PP
.nf
A generator that yields random joint angles.
.fi
.PP
 
.PP
.nf
22 def random_joint_angles_generator(n_poses=1):
23     """A generator that yields random joint angles\&."""
24     for i in xrange(n_poses):
25         # TODO: Check that the angles are valid
26         # 1: anything
27         # 2: -1\&.571 +/- 1
28         # 3: -1\&.571 +/- 1
29         # 4-6: anything
30         offset = np\&.array([0\&.0, -0\&.5 * np\&.pi, -0\&.5 * np\&.pi, 0\&.0, 0\&.0, 0\&.0])
31         scale = np\&.array([2 * np\&.pi, 2\&.1, 3\&.2, 2 * np\&.pi, 2 * np\&.pi, 2 * np\&.pi])
32         yield (np\&.random\&.random(6) - 0\&.5) * scale + offset
33 
34 
.fi
.SS "def goal_generators\&.random_mico_finger_positions ( n_positions = \fC1\fP)"

.PP
.nf

.fi
.PP
 
.PP
.nf
50 def random_mico_finger_positions(n_positions=1):
51     """ """
52     for i in xrange(n_positions):
53         # finger min/max range: [12 to 6450]?
54         yield np\&.random\&.random(2) * 6300\&.0 + 12\&.0
55 
56 
.fi
.SS "def goal_generators\&.random_pose_generator ( n_poses = \fC1\fP)"

.PP
.nf
A generator that yields random poses, position: [x,y,z] orientation: [x,y,z,w].
.fi
.PP
 
.PP
.nf
4 def random_pose_generator(n_poses=1):
5     """A generator that yields random poses, position: [x,y,z] orientation: [x,y,z,w]\&."""
6     for i in xrange(n_poses):
7         orient = np\&.random\&.random(4)
8         mag = np\&.sqrt(sum(np\&.power(orient, 2)))
9         yield np\&.random\&.random(3), orient / mag
10 
11 
.fi
.SH "Variable Documentation"
.PP 
.SS "goal_generators\&.n_fingers"

.SH "Author"
.PP 
Generated automatically by Doxygen for Kinova-ROS from the source code\&.
