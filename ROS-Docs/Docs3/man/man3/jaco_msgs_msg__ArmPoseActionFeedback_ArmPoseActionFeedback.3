.TH "jaco_msgs.msg._ArmPoseActionFeedback.ArmPoseActionFeedback" 3 "Thu Mar 3 2016" "Version 1.0.1" "Kinova-ROS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jaco_msgs.msg._ArmPoseActionFeedback.ArmPoseActionFeedback \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits Message\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, args, kwds)"
.br
.ti -1c
.RI "def \fBdeserialize\fP (self, str)"
.br
.ti -1c
.RI "def \fBdeserialize_numpy\fP (self, str, numpy)"
.br
.ti -1c
.RI "def \fBserialize\fP (self, buff)"
.br
.ti -1c
.RI "def \fBserialize_numpy\fP (self, buff, numpy)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBfeedback\fP"
.br
.ti -1c
.RI "\fBheader\fP"
.br
.ti -1c
.RI "\fBstatus\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "def \fB_get_types\fP (self)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "list \fB__slots__\fP = ['\fBheader\fP','\fBstatus\fP','\fBfeedback\fP']"
.br
.ti -1c
.RI "string \fB_full_text\fP"
.br
.ti -1c
.RI "bool \fB_has_header\fP = True"
.br
.ti -1c
.RI "string \fB_md5sum\fP = 'b0679c7def49e139177af1a7d99e35b6'"
.br
.ti -1c
.RI "list \fB_slot_types\fP = ['std_msgs/Header','actionlib_msgs/GoalStatus','jaco_msgs/\fBArmPoseFeedback\fP']"
.br
.ti -1c
.RI "string \fB_type\fP = 'jaco_msgs/\fBArmPoseActionFeedback\fP'"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.__init__ ( self,  args,  kwds)"

.PP
.nf
Constructor. Any message fields that are implicitly/explicitly
set to None will be assigned a default value. The recommend
use is keyword arguments as this is more robust to future message
changes.  You cannot mix in-order arguments and keyword arguments.

The available fields are:
   header,status,feedback

:param args: complete set of field values, in .msg order
:param kwds: use keyword arguments corresponding to message field names
to set specific fields.

.fi
.PP
 
.PP
.nf
119   def __init__(self, *args, **kwds):
120     """
121     Constructor\&. Any message fields that are implicitly/explicitly
122     set to None will be assigned a default value\&. The recommend
123     use is keyword arguments as this is more robust to future message
124     changes\&.  You cannot mix in-order arguments and keyword arguments\&.
125 
126     The available fields are:
127        header,status,feedback
128 
129     :param args: complete set of field values, in \&.msg order
130     :param kwds: use keyword arguments corresponding to message field names
131     to set specific fields\&.
132     """
133     if args or kwds:
134       super(ArmPoseActionFeedback, self)\&.__init__(*args, **kwds)
135       #message fields cannot be None, assign default values for those that are
136       if self\&.header is None:
137         self\&.header = std_msgs\&.msg\&.Header()
138       if self\&.status is None:
139         self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
140       if self\&.feedback is None:
141         self\&.feedback = jaco_msgs\&.msg\&.ArmPoseFeedback()
142     else:
143       self\&.header = std_msgs\&.msg\&.Header()
144       self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
145       self\&.feedback = jaco_msgs\&.msg\&.ArmPoseFeedback()
146 
.fi
.SH "Member Function Documentation"
.PP 
.SS "def jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&._get_types ( self)\fC [private]\fP"

.PP
.nf
internal API method

.fi
.PP
 
.PP
.nf
147   def _get_types(self):
148     """
149     internal API method
150     """
151     return self\&._slot_types
152 
.fi
.SS "def jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize ( self,  str)"

.PP
.nf
unpack serialized message in str into this message instance
:param str: byte array of serialized message, ``str``

.fi
.PP
 
.PP
.nf
195   def deserialize(self, str):
196     """
197     unpack serialized message in str into this message instance
198     :param str: byte array of serialized message, ``str``
199     """
200     try:
201       if self\&.header is None:
202         self\&.header = std_msgs\&.msg\&.Header()
203       if self\&.status is None:
204         self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
205       if self\&.feedback is None:
206         self\&.feedback = jaco_msgs\&.msg\&.ArmPoseFeedback()
207       end = 0
208       _x = self
209       start = end
210       end += 12
211       (_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs,) = _struct_3I\&.unpack(str[start:end])
212       start = end
213       end += 4
214       (length,) = _struct_I\&.unpack(str[start:end])
215       start = end
216       end += length
217       if python3:
218         self\&.header\&.frame_id = str[start:end]\&.decode('utf-8')
219       else:
220         self\&.header\&.frame_id = str[start:end]
221       _x = self
222       start = end
223       end += 8
224       (_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs,) = _struct_2I\&.unpack(str[start:end])
225       start = end
226       end += 4
227       (length,) = _struct_I\&.unpack(str[start:end])
228       start = end
229       end += length
230       if python3:
231         self\&.status\&.goal_id\&.id = str[start:end]\&.decode('utf-8')
232       else:
233         self\&.status\&.goal_id\&.id = str[start:end]
234       start = end
235       end += 1
236       (self\&.status\&.status,) = _struct_B\&.unpack(str[start:end])
237       start = end
238       end += 4
239       (length,) = _struct_I\&.unpack(str[start:end])
240       start = end
241       end += length
242       if python3:
243         self\&.status\&.text = str[start:end]\&.decode('utf-8')
244       else:
245         self\&.status\&.text = str[start:end]
246       _x = self
247       start = end
248       end += 12
249       (_x\&.feedback\&.pose\&.header\&.seq, _x\&.feedback\&.pose\&.header\&.stamp\&.secs, _x\&.feedback\&.pose\&.header\&.stamp\&.nsecs,) = _struct_3I\&.unpack(str[start:end])
250       start = end
251       end += 4
252       (length,) = _struct_I\&.unpack(str[start:end])
253       start = end
254       end += length
255       if python3:
256         self\&.feedback\&.pose\&.header\&.frame_id = str[start:end]\&.decode('utf-8')
257       else:
258         self\&.feedback\&.pose\&.header\&.frame_id = str[start:end]
259       _x = self
260       start = end
261       end += 56
262       (_x\&.feedback\&.pose\&.pose\&.position\&.x, _x\&.feedback\&.pose\&.pose\&.position\&.y, _x\&.feedback\&.pose\&.pose\&.position\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.x, _x\&.feedback\&.pose\&.pose\&.orientation\&.y, _x\&.feedback\&.pose\&.pose\&.orientation\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.w,) = _struct_7d\&.unpack(str[start:end])
263       return self
264     except struct\&.error as e:
265       raise genpy\&.DeserializationError(e) #most likely buffer underfill
266 
267 
.fi
.SS "def jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize_numpy ( self,  str,  numpy)"

.PP
.nf
unpack serialized message in str into this message instance using numpy for array types
:param str: byte array of serialized message, ``str``
:param numpy: numpy python module

.fi
.PP
 
.PP
.nf
311   def deserialize_numpy(self, str, numpy):
312     """
313     unpack serialized message in str into this message instance using numpy for array types
314     :param str: byte array of serialized message, ``str``
315     :param numpy: numpy python module
316     """
317     try:
318       if self\&.header is None:
319         self\&.header = std_msgs\&.msg\&.Header()
320       if self\&.status is None:
321         self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
322       if self\&.feedback is None:
323         self\&.feedback = jaco_msgs\&.msg\&.ArmPoseFeedback()
324       end = 0
325       _x = self
326       start = end
327       end += 12
328       (_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs,) = _struct_3I\&.unpack(str[start:end])
329       start = end
330       end += 4
331       (length,) = _struct_I\&.unpack(str[start:end])
332       start = end
333       end += length
334       if python3:
335         self\&.header\&.frame_id = str[start:end]\&.decode('utf-8')
336       else:
337         self\&.header\&.frame_id = str[start:end]
338       _x = self
339       start = end
340       end += 8
341       (_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs,) = _struct_2I\&.unpack(str[start:end])
342       start = end
343       end += 4
344       (length,) = _struct_I\&.unpack(str[start:end])
345       start = end
346       end += length
347       if python3:
348         self\&.status\&.goal_id\&.id = str[start:end]\&.decode('utf-8')
349       else:
350         self\&.status\&.goal_id\&.id = str[start:end]
351       start = end
352       end += 1
353       (self\&.status\&.status,) = _struct_B\&.unpack(str[start:end])
354       start = end
355       end += 4
356       (length,) = _struct_I\&.unpack(str[start:end])
357       start = end
358       end += length
359       if python3:
360         self\&.status\&.text = str[start:end]\&.decode('utf-8')
361       else:
362         self\&.status\&.text = str[start:end]
363       _x = self
364       start = end
365       end += 12
366       (_x\&.feedback\&.pose\&.header\&.seq, _x\&.feedback\&.pose\&.header\&.stamp\&.secs, _x\&.feedback\&.pose\&.header\&.stamp\&.nsecs,) = _struct_3I\&.unpack(str[start:end])
367       start = end
368       end += 4
369       (length,) = _struct_I\&.unpack(str[start:end])
370       start = end
371       end += length
372       if python3:
373         self\&.feedback\&.pose\&.header\&.frame_id = str[start:end]\&.decode('utf-8')
374       else:
375         self\&.feedback\&.pose\&.header\&.frame_id = str[start:end]
376       _x = self
377       start = end
378       end += 56
379       (_x\&.feedback\&.pose\&.pose\&.position\&.x, _x\&.feedback\&.pose\&.pose\&.position\&.y, _x\&.feedback\&.pose\&.pose\&.position\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.x, _x\&.feedback\&.pose\&.pose\&.orientation\&.y, _x\&.feedback\&.pose\&.pose\&.orientation\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.w,) = _struct_7d\&.unpack(str[start:end])
380       return self
381     except struct\&.error as e:
382       raise genpy\&.DeserializationError(e) #most likely buffer underfill
383 
.fi
.SS "def jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.serialize ( self,  buff)"

.PP
.nf
serialize message into buffer
:param buff: buffer, ``StringIO``

.fi
.PP
 
.PP
.nf
153   def serialize(self, buff):
154     """
155     serialize message into buffer
156     :param buff: buffer, ``StringIO``
157     """
158     try:
159       _x = self
160       buff\&.write(_struct_3I\&.pack(_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs))
161       _x = self\&.header\&.frame_id
162       length = len(_x)
163       if python3 or type(_x) == unicode:
164         _x = _x\&.encode('utf-8')
165         length = len(_x)
166       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
167       _x = self
168       buff\&.write(_struct_2I\&.pack(_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs))
169       _x = self\&.status\&.goal_id\&.id
170       length = len(_x)
171       if python3 or type(_x) == unicode:
172         _x = _x\&.encode('utf-8')
173         length = len(_x)
174       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
175       buff\&.write(_struct_B\&.pack(self\&.status\&.status))
176       _x = self\&.status\&.text
177       length = len(_x)
178       if python3 or type(_x) == unicode:
179         _x = _x\&.encode('utf-8')
180         length = len(_x)
181       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
182       _x = self
183       buff\&.write(_struct_3I\&.pack(_x\&.feedback\&.pose\&.header\&.seq, _x\&.feedback\&.pose\&.header\&.stamp\&.secs, _x\&.feedback\&.pose\&.header\&.stamp\&.nsecs))
184       _x = self\&.feedback\&.pose\&.header\&.frame_id
185       length = len(_x)
186       if python3 or type(_x) == unicode:
187         _x = _x\&.encode('utf-8')
188         length = len(_x)
189       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
190       _x = self
191       buff\&.write(_struct_7d\&.pack(_x\&.feedback\&.pose\&.pose\&.position\&.x, _x\&.feedback\&.pose\&.pose\&.position\&.y, _x\&.feedback\&.pose\&.pose\&.position\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.x, _x\&.feedback\&.pose\&.pose\&.orientation\&.y, _x\&.feedback\&.pose\&.pose\&.orientation\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.w))
192     except struct\&.error as se: self\&._check_types(struct\&.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
193     except TypeError as te: self\&._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))
194 
.fi
.SS "def jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.serialize_numpy ( self,  buff,  numpy)"

.PP
.nf
serialize message with numpy array types into buffer
:param buff: buffer, ``StringIO``
:param numpy: numpy python module

.fi
.PP
 
.PP
.nf
268   def serialize_numpy(self, buff, numpy):
269     """
270     serialize message with numpy array types into buffer
271     :param buff: buffer, ``StringIO``
272     :param numpy: numpy python module
273     """
274     try:
275       _x = self
276       buff\&.write(_struct_3I\&.pack(_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs))
277       _x = self\&.header\&.frame_id
278       length = len(_x)
279       if python3 or type(_x) == unicode:
280         _x = _x\&.encode('utf-8')
281         length = len(_x)
282       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
283       _x = self
284       buff\&.write(_struct_2I\&.pack(_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs))
285       _x = self\&.status\&.goal_id\&.id
286       length = len(_x)
287       if python3 or type(_x) == unicode:
288         _x = _x\&.encode('utf-8')
289         length = len(_x)
290       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
291       buff\&.write(_struct_B\&.pack(self\&.status\&.status))
292       _x = self\&.status\&.text
293       length = len(_x)
294       if python3 or type(_x) == unicode:
295         _x = _x\&.encode('utf-8')
296         length = len(_x)
297       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
298       _x = self
299       buff\&.write(_struct_3I\&.pack(_x\&.feedback\&.pose\&.header\&.seq, _x\&.feedback\&.pose\&.header\&.stamp\&.secs, _x\&.feedback\&.pose\&.header\&.stamp\&.nsecs))
300       _x = self\&.feedback\&.pose\&.header\&.frame_id
301       length = len(_x)
302       if python3 or type(_x) == unicode:
303         _x = _x\&.encode('utf-8')
304         length = len(_x)
305       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
306       _x = self
307       buff\&.write(_struct_7d\&.pack(_x\&.feedback\&.pose\&.pose\&.position\&.x, _x\&.feedback\&.pose\&.pose\&.position\&.y, _x\&.feedback\&.pose\&.pose\&.position\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.x, _x\&.feedback\&.pose\&.pose\&.orientation\&.y, _x\&.feedback\&.pose\&.pose\&.orientation\&.z, _x\&.feedback\&.pose\&.pose\&.orientation\&.w))
308     except struct\&.error as se: self\&._check_types(struct\&.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
309     except TypeError as te: self\&._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))
310 
.fi
.SH "Member Data Documentation"
.PP 
.SS "list jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.__slots__ = ['\fBheader\fP','\fBstatus\fP','\fBfeedback\fP']\fC [static]\fP, \fC [private]\fP"

.SS "string jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&._full_text\fC [static]\fP, \fC [private]\fP"

.SS "bool jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&._has_header = True\fC [static]\fP, \fC [private]\fP"

.SS "string jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&._md5sum = 'b0679c7def49e139177af1a7d99e35b6'\fC [static]\fP, \fC [private]\fP"

.SS "list jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&._slot_types = ['std_msgs/Header','actionlib_msgs/GoalStatus','jaco_msgs/\fBArmPoseFeedback\fP']\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&._get_types()\&.
.SS "string jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&._type = 'jaco_msgs/\fBArmPoseActionFeedback\fP'\fC [static]\fP, \fC [private]\fP"

.SS "jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.feedback"

.PP
Referenced by jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize(), and jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.header"

.PP
Referenced by jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.__init__(), jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize(), and jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.status"

.PP
Referenced by jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize(), and jaco_msgs\&.msg\&._ArmPoseActionFeedback\&.ArmPoseActionFeedback\&.deserialize_numpy()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Kinova-ROS from the source code\&.
