.TH "_setup_util" 3 "Thu Mar 3 2016" "Version 1.0.1" "Kinova-ROS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
_setup_util \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "def \fB_get_workspaces\fP (\fBenviron\fP, include_fuerte=False, include_non_existing=False)"
.br
.ti -1c
.RI "def \fB_parse_arguments\fP (\fBargs\fP=None)"
.br
.ti -1c
.RI "def \fB_prefix_env_variable\fP (\fBenviron\fP, name, paths, subfolder)"
.br
.ti -1c
.RI "def \fB_rollback_env_variable\fP (\fBenviron\fP, name, subfolder)"
.br
.ti -1c
.RI "def \fBassignment\fP (key, value)"
.br
.ti -1c
.RI "def \fBcomment\fP (msg)"
.br
.ti -1c
.RI "def \fBfind_env_hooks\fP (\fBenviron\fP, cmake_prefix_path)"
.br
.ti -1c
.RI "def \fBprepend\fP (\fBenviron\fP, key, prefix)"
.br
.ti -1c
.RI "def \fBprepend_env_variables\fP (\fBenviron\fP, env_var_subfolders, workspaces)"
.br
.ti -1c
.RI "def \fBrollback_env_variables\fP (\fBenviron\fP, env_var_subfolders)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBargs\fP = \fB_parse_arguments\fP()"
.br
.ti -1c
.RI "\fBbase_path\fP = os\&.path\&.dirname(__file__)"
.br
.ti -1c
.RI "string \fBCATKIN_MARKER_FILE\fP = '\&.catkin'"
.br
.ti -1c
.RI "string \fBCMAKE_PREFIX_PATH\fP = '/home/longfei/catkin_ws/devel;/opt/ros/hydro'"
.br
.ti -1c
.RI "\fBe\fP"
.br
.ti -1c
.RI "dictionary \fBENV_VAR_SUBFOLDERS\fP"
.br
.ti -1c
.RI "\fBenviron\fP = dict(os\&.environ)"
.br
.ti -1c
.RI "\fBfile\fP"
.br
.ti -1c
.RI "tuple \fBIS_DARWIN\fP = (\fBsystem\fP == 'Darwin')"
.br
.ti -1c
.RI "tuple \fBIS_WINDOWS\fP = (\fBsystem\fP == 'Windows')"
.br
.ti -1c
.RI "list \fBlines\fP = []"
.br
.ti -1c
.RI "\fBsystem\fP = platform\&.system()"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "def _setup_util\&._get_workspaces ( environ,  include_fuerte = \fCFalse\fP,  include_non_existing = \fCFalse\fP)\fC [private]\fP"

.PP
.nf
Based on CMAKE_PREFIX_PATH return all catkin workspaces.

:param include_fuerte: The flag if paths starting with '/opt/ros/fuerte' should be considered workspaces, ``bool``

.fi
.PP
 
.PP
.nf
111 def _get_workspaces(environ, include_fuerte=False, include_non_existing=False):
112     '''
113     Based on CMAKE_PREFIX_PATH return all catkin workspaces\&.
114 
115     :param include_fuerte: The flag if paths starting with '/opt/ros/fuerte' should be considered workspaces, ``bool``
116     '''
117     # get all cmake prefix paths
118     env_name = 'CMAKE_PREFIX_PATH'
119     value = environ[env_name] if env_name in environ else ''
120     paths = [path for path in value\&.split(os\&.pathsep) if path]
121     # remove non-workspace paths
122     workspaces = [path for path in paths if os\&.path\&.isfile(os\&.path\&.join(path, CATKIN_MARKER_FILE)) or (include_fuerte and path\&.startswith('/opt/ros/fuerte')) or (include_non_existing and not os\&.path\&.exists(path))]
123     return workspaces
124 
125 
.fi
.SS "def _setup_util\&._parse_arguments ( args = \fCNone\fP)\fC [private]\fP"

.PP
.nf
240 def _parse_arguments(args=None):
241     parser = argparse\&.ArgumentParser(description='Generates code blocks for the setup\&.SHELL script\&.')
242     parser\&.add_argument('--extend', action='store_true', help='Skip unsetting previous environment variables to extend context')
243     return parser\&.parse_known_args(args=args)[0]
244 
245 
.fi
.SS "def _setup_util\&._prefix_env_variable ( environ,  name,  paths,  subfolder)\fC [private]\fP"

.PP
.nf
Return the prefix to prepend to the environment variable NAME, adding any path in NEW_PATHS_STR without creating duplicate or empty items.

.fi
.PP
 
.PP
.nf
146 def _prefix_env_variable(environ, name, paths, subfolder):
147     '''
148     Return the prefix to prepend to the environment variable NAME, adding any path in NEW_PATHS_STR without creating duplicate or empty items\&.
149     '''
150     value = environ[name] if name in environ else ''
151     environ_paths = [path for path in value\&.split(os\&.pathsep) if path]
152     checked_paths = []
153     for path in paths:
154         if subfolder:
155             path = os\&.path\&.join(path, subfolder)
156         # exclude any path already in env and any path we already added
157         if path not in environ_paths and path not in checked_paths:
158             checked_paths\&.append(path)
159     prefix_str = os\&.pathsep\&.join(checked_paths)
160     if prefix_str != '' and environ_paths:
161         prefix_str += os\&.pathsep
162     return prefix_str
163 
164 
.fi
.SS "def _setup_util\&._rollback_env_variable ( environ,  name,  subfolder)\fC [private]\fP"

.PP
.nf
For each catkin workspace in CMAKE_PREFIX_PATH remove the first entry from env[NAME] matching workspace + subfolder.

:param subfolder: str '' or subfoldername that may start with '/'
:returns: the updated value of the environment variable.

.fi
.PP
 
.PP
.nf
81 def _rollback_env_variable(environ, name, subfolder):
82     '''
83     For each catkin workspace in CMAKE_PREFIX_PATH remove the first entry from env[NAME] matching workspace + subfolder\&.
84 
85     :param subfolder: str '' or subfoldername that may start with '/'
86     :returns: the updated value of the environment variable\&.
87     '''
88     value = environ[name] if name in environ else ''
89     env_paths = [path for path in value\&.split(os\&.pathsep) if path]
90     value_modified = False
91     if subfolder:
92         if subfolder\&.startswith(os\&.path\&.sep) or (os\&.path\&.altsep and subfolder\&.startswith(os\&.path\&.altsep)):
93             subfolder = subfolder[1:]
94         if subfolder\&.endswith(os\&.path\&.sep) or (os\&.path\&.altsep and subfolder\&.endswith(os\&.path\&.altsep)):
95             subfolder = subfolder[:-1]
96     for ws_path in _get_workspaces(environ, include_fuerte=True, include_non_existing=True):
97         path_to_find = os\&.path\&.join(ws_path, subfolder) if subfolder else ws_path
98         path_to_remove = None
99         for env_path in env_paths:
100             env_path_clean = env_path[:-1] if env_path and env_path[-1] in [os\&.path\&.sep, os\&.path\&.altsep] else env_path
101             if env_path_clean == path_to_find:
102                 path_to_remove = env_path
103                 break
104         if path_to_remove:
105             env_paths\&.remove(path_to_remove)
106             value_modified = True
107     new_value = os\&.pathsep\&.join(env_paths)
108     return new_value if value_modified else None
109 
110 
.fi
.SS "def _setup_util\&.assignment ( key,  value)"

.PP
.nf
165 def assignment(key, value):
166     if not IS_WINDOWS:
167         return 'export %s="%s"' % (key, value)
168     else:
169         return 'set %s=%s' % (key, value)
170 
171 
.fi
.SS "def _setup_util\&.comment ( msg)"

.PP
.nf
172 def comment(msg):
173     if not IS_WINDOWS:
174         return '# %s' % msg
175     else:
176         return 'REM %s' % msg
177 
178 
.fi
.SS "def _setup_util\&.find_env_hooks ( environ,  cmake_prefix_path)"

.PP
.nf
Generate shell code with found environment hooks
for the all workspaces.

.fi
.PP
 
.PP
.nf
188 def find_env_hooks(environ, cmake_prefix_path):
189     '''
190     Generate shell code with found environment hooks
191     for the all workspaces\&.
192     '''
193     lines = []
194     lines\&.append(comment('found environment hooks in workspaces'))
195 
196     generic_env_hooks = []
197     generic_env_hooks_workspace = []
198     specific_env_hooks = []
199     specific_env_hooks_workspace = []
200     generic_env_hooks_by_filename = {}
201     specific_env_hooks_by_filename = {}
202     generic_env_hook_ext = 'bat' if IS_WINDOWS else 'sh'
203     specific_env_hook_ext = environ['CATKIN_SHELL'] if not IS_WINDOWS and 'CATKIN_SHELL' in environ and environ['CATKIN_SHELL'] else None
204     # remove non-workspace paths
205     workspaces = [path for path in cmake_prefix_path\&.split(os\&.pathsep) if path and os\&.path\&.isfile(os\&.path\&.join(path, CATKIN_MARKER_FILE))]
206     for workspace in reversed(workspaces):
207         env_hook_dir = os\&.path\&.join(workspace, 'etc', 'catkin', 'profile\&.d')
208         if os\&.path\&.isdir(env_hook_dir):
209             for filename in sorted(os\&.listdir(env_hook_dir)):
210                 if filename\&.endswith('\&.%s' % generic_env_hook_ext):
211                     # remove previous env hook with same name if present
212                     if filename in generic_env_hooks_by_filename:
213                         i = generic_env_hooks\&.index(generic_env_hooks_by_filename[filename])
214                         generic_env_hooks\&.pop(i)
215                         generic_env_hooks_workspace\&.pop(i)
216                     # append env hook
217                     generic_env_hooks\&.append(os\&.path\&.join(env_hook_dir, filename))
218                     generic_env_hooks_workspace\&.append(workspace)
219                     generic_env_hooks_by_filename[filename] = generic_env_hooks[-1]
220                 elif specific_env_hook_ext is not None and filename\&.endswith('\&.%s' % specific_env_hook_ext):
221                     # remove previous env hook with same name if present
222                     if filename in specific_env_hooks_by_filename:
223                         i = specific_env_hooks\&.index(specific_env_hooks_by_filename[filename])
224                         specific_env_hooks\&.pop(i)
225                         specific_env_hooks_workspace\&.pop(i)
226                     # append env hook
227                     specific_env_hooks\&.append(os\&.path\&.join(env_hook_dir, filename))
228                     specific_env_hooks_workspace\&.append(workspace)
229                     specific_env_hooks_by_filename[filename] = specific_env_hooks[-1]
230     env_hooks = generic_env_hooks + specific_env_hooks
231     env_hooks_workspace = generic_env_hooks_workspace + specific_env_hooks_workspace
232     count = len(env_hooks)
233     lines\&.append(assignment('_CATKIN_ENVIRONMENT_HOOKS_COUNT', count))
234     for i in range(count):
235         lines\&.append(assignment('_CATKIN_ENVIRONMENT_HOOKS_%d' % i, env_hooks[i]))
236         lines\&.append(assignment('_CATKIN_ENVIRONMENT_HOOKS_%d_WORKSPACE' % i, env_hooks_workspace[i]))
237     return lines
238 
239 
.fi
.SS "def _setup_util\&.prepend ( environ,  key,  prefix)"

.PP
.nf
179 def prepend(environ, key, prefix):
180     if key not in environ or not environ[key]:
181         return assignment(key, prefix)
182     if not IS_WINDOWS:
183         return 'export %s="%s$%s"' % (key, prefix, key)
184     else:
185         return 'set %s=%s%%%s%%' % (key, prefix, key)
186 
187 
.fi
.SS "def _setup_util\&.prepend_env_variables ( environ,  env_var_subfolders,  workspaces)"

.PP
.nf
Generate shell code to prepend environment variables
for the all workspaces.

.fi
.PP
 
.PP
.nf
126 def prepend_env_variables(environ, env_var_subfolders, workspaces):
127     '''
128     Generate shell code to prepend environment variables
129     for the all workspaces\&.
130     '''
131     lines = []
132     lines\&.append(comment('prepend folders of workspaces to environment variables'))
133 
134     paths = [path for path in workspaces\&.split(os\&.pathsep) if path]
135 
136     prefix = _prefix_env_variable(environ, 'CMAKE_PREFIX_PATH', paths, '')
137     lines\&.append(prepend(environ, 'CMAKE_PREFIX_PATH', prefix))
138 
139     for key in sorted([key for key in env_var_subfolders\&.keys() if key != 'CMAKE_PREFIX_PATH']):
140         subfolder = env_var_subfolders[key]
141         prefix = _prefix_env_variable(environ, key, paths, subfolder)
142         lines\&.append(prepend(environ, key, prefix))
143     return lines
144 
145 
.fi
.SS "def _setup_util\&.rollback_env_variables ( environ,  env_var_subfolders)"

.PP
.nf
Generate shell code to reset environment variables
by unrolling modifications based on all workspaces in CMAKE_PREFIX_PATH.
This does not cover modifications performed by environment hooks.

.fi
.PP
 
.PP
.nf
62 def rollback_env_variables(environ, env_var_subfolders):
63     '''
64     Generate shell code to reset environment variables
65     by unrolling modifications based on all workspaces in CMAKE_PREFIX_PATH\&.
66     This does not cover modifications performed by environment hooks\&.
67     '''
68     lines = []
69     unmodified_environ = copy\&.copy(environ)
70     for key in sorted(env_var_subfolders\&.keys()):
71         subfolder = env_var_subfolders[key]
72         value = _rollback_env_variable(unmodified_environ, key, subfolder)
73         if value is not None:
74             environ[key] = value
75             lines\&.append(assignment(key, value))
76     if lines:
77         lines\&.insert(0, comment('reset environment variables by unrolling modifications based on all workspaces in CMAKE_PREFIX_PATH'))
78     return lines
79 
80 
.fi
.SH "Variable Documentation"
.PP 
.SS "_setup_util\&.args = \fB_parse_arguments\fP()"

.SS "_setup_util\&.base_path = os\&.path\&.dirname(__file__)"

.SS "string _setup_util\&.CATKIN_MARKER_FILE = '\&.catkin'"

.SS "string _setup_util\&.CMAKE_PREFIX_PATH = '/home/longfei/catkin_ws/devel;/opt/ros/hydro'"

.SS "_setup_util\&.e"

.SS "dictionary _setup_util\&.ENV_VAR_SUBFOLDERS"
\fBInitial value:\fP
.PP
.nf
1 = {
2     'CMAKE_PREFIX_PATH': '',
3     'CPATH': 'include',
4     'LD_LIBRARY_PATH' if not IS_DARWIN else 'DYLD_LIBRARY_PATH': 'lib',
5     'PATH': 'bin',
6     'PKG_CONFIG_PATH': 'lib/pkgconfig',
7     'PYTHONPATH': 'lib/python2\&.7/dist-packages',
8 }
.fi
.SS "_setup_util\&.environ = dict(os\&.environ)"

.SS "_setup_util\&.file"

.SS "tuple _setup_util\&.IS_DARWIN = (\fBsystem\fP == 'Darwin')"

.SS "tuple _setup_util\&.IS_WINDOWS = (\fBsystem\fP == 'Windows')"

.SS "list _setup_util\&.lines = []"

.SS "_setup_util\&.system = platform\&.system()"

.SH "Author"
.PP 
Generated automatically by Doxygen for Kinova-ROS from the source code\&.
