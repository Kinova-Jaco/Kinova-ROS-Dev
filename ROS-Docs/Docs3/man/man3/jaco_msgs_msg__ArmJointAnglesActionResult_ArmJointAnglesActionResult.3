.TH "jaco_msgs.msg._ArmJointAnglesActionResult.ArmJointAnglesActionResult" 3 "Thu Mar 3 2016" "Version 1.0.1" "Kinova-ROS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jaco_msgs.msg._ArmJointAnglesActionResult.ArmJointAnglesActionResult \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits Message\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, args, kwds)"
.br
.ti -1c
.RI "def \fBdeserialize\fP (self, str)"
.br
.ti -1c
.RI "def \fBdeserialize_numpy\fP (self, str, numpy)"
.br
.ti -1c
.RI "def \fBserialize\fP (self, buff)"
.br
.ti -1c
.RI "def \fBserialize_numpy\fP (self, buff, numpy)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBheader\fP"
.br
.ti -1c
.RI "\fBresult\fP"
.br
.ti -1c
.RI "\fBstatus\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "def \fB_get_types\fP (self)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "list \fB__slots__\fP = ['\fBheader\fP','\fBstatus\fP','\fBresult\fP']"
.br
.ti -1c
.RI "string \fB_full_text\fP"
.br
.ti -1c
.RI "bool \fB_has_header\fP = True"
.br
.ti -1c
.RI "string \fB_md5sum\fP = '1419c77c622a1f52ee6fc0926c8ae186'"
.br
.ti -1c
.RI "list \fB_slot_types\fP = ['std_msgs/Header','actionlib_msgs/GoalStatus','jaco_msgs/\fBArmJointAnglesResult\fP']"
.br
.ti -1c
.RI "string \fB_type\fP = 'jaco_msgs/\fBArmJointAnglesActionResult\fP'"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.__init__ ( self,  args,  kwds)"

.PP
.nf
Constructor. Any message fields that are implicitly/explicitly
set to None will be assigned a default value. The recommend
use is keyword arguments as this is more robust to future message
changes.  You cannot mix in-order arguments and keyword arguments.

The available fields are:
   header,status,result

:param args: complete set of field values, in .msg order
:param kwds: use keyword arguments corresponding to message field names
to set specific fields.

.fi
.PP
 
.PP
.nf
98   def __init__(self, *args, **kwds):
99     """
100     Constructor\&. Any message fields that are implicitly/explicitly
101     set to None will be assigned a default value\&. The recommend
102     use is keyword arguments as this is more robust to future message
103     changes\&.  You cannot mix in-order arguments and keyword arguments\&.
104 
105     The available fields are:
106        header,status,result
107 
108     :param args: complete set of field values, in \&.msg order
109     :param kwds: use keyword arguments corresponding to message field names
110     to set specific fields\&.
111     """
112     if args or kwds:
113       super(ArmJointAnglesActionResult, self)\&.__init__(*args, **kwds)
114       #message fields cannot be None, assign default values for those that are
115       if self\&.header is None:
116         self\&.header = std_msgs\&.msg\&.Header()
117       if self\&.status is None:
118         self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
119       if self\&.result is None:
120         self\&.result = jaco_msgs\&.msg\&.ArmJointAnglesResult()
121     else:
122       self\&.header = std_msgs\&.msg\&.Header()
123       self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
124       self\&.result = jaco_msgs\&.msg\&.ArmJointAnglesResult()
125 
.fi
.SH "Member Function Documentation"
.PP 
.SS "def jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&._get_types ( self)\fC [private]\fP"

.PP
.nf
internal API method

.fi
.PP
 
.PP
.nf
126   def _get_types(self):
127     """
128     internal API method
129     """
130     return self\&._slot_types
131 
.fi
.SS "def jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize ( self,  str)"

.PP
.nf
unpack serialized message in str into this message instance
:param str: byte array of serialized message, ``str``

.fi
.PP
 
.PP
.nf
166   def deserialize(self, str):
167     """
168     unpack serialized message in str into this message instance
169     :param str: byte array of serialized message, ``str``
170     """
171     try:
172       if self\&.header is None:
173         self\&.header = std_msgs\&.msg\&.Header()
174       if self\&.status is None:
175         self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
176       if self\&.result is None:
177         self\&.result = jaco_msgs\&.msg\&.ArmJointAnglesResult()
178       end = 0
179       _x = self
180       start = end
181       end += 12
182       (_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs,) = _struct_3I\&.unpack(str[start:end])
183       start = end
184       end += 4
185       (length,) = _struct_I\&.unpack(str[start:end])
186       start = end
187       end += length
188       if python3:
189         self\&.header\&.frame_id = str[start:end]\&.decode('utf-8')
190       else:
191         self\&.header\&.frame_id = str[start:end]
192       _x = self
193       start = end
194       end += 8
195       (_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs,) = _struct_2I\&.unpack(str[start:end])
196       start = end
197       end += 4
198       (length,) = _struct_I\&.unpack(str[start:end])
199       start = end
200       end += length
201       if python3:
202         self\&.status\&.goal_id\&.id = str[start:end]\&.decode('utf-8')
203       else:
204         self\&.status\&.goal_id\&.id = str[start:end]
205       start = end
206       end += 1
207       (self\&.status\&.status,) = _struct_B\&.unpack(str[start:end])
208       start = end
209       end += 4
210       (length,) = _struct_I\&.unpack(str[start:end])
211       start = end
212       end += length
213       if python3:
214         self\&.status\&.text = str[start:end]\&.decode('utf-8')
215       else:
216         self\&.status\&.text = str[start:end]
217       _x = self
218       start = end
219       end += 24
220       (_x\&.result\&.angles\&.joint1, _x\&.result\&.angles\&.joint2, _x\&.result\&.angles\&.joint3, _x\&.result\&.angles\&.joint4, _x\&.result\&.angles\&.joint5, _x\&.result\&.angles\&.joint6,) = _struct_6f\&.unpack(str[start:end])
221       return self
222     except struct\&.error as e:
223       raise genpy\&.DeserializationError(e) #most likely buffer underfill
224 
225 
.fi
.SS "def jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize_numpy ( self,  str,  numpy)"

.PP
.nf
unpack serialized message in str into this message instance using numpy for array types
:param str: byte array of serialized message, ``str``
:param numpy: numpy python module

.fi
.PP
 
.PP
.nf
261   def deserialize_numpy(self, str, numpy):
262     """
263     unpack serialized message in str into this message instance using numpy for array types
264     :param str: byte array of serialized message, ``str``
265     :param numpy: numpy python module
266     """
267     try:
268       if self\&.header is None:
269         self\&.header = std_msgs\&.msg\&.Header()
270       if self\&.status is None:
271         self\&.status = actionlib_msgs\&.msg\&.GoalStatus()
272       if self\&.result is None:
273         self\&.result = jaco_msgs\&.msg\&.ArmJointAnglesResult()
274       end = 0
275       _x = self
276       start = end
277       end += 12
278       (_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs,) = _struct_3I\&.unpack(str[start:end])
279       start = end
280       end += 4
281       (length,) = _struct_I\&.unpack(str[start:end])
282       start = end
283       end += length
284       if python3:
285         self\&.header\&.frame_id = str[start:end]\&.decode('utf-8')
286       else:
287         self\&.header\&.frame_id = str[start:end]
288       _x = self
289       start = end
290       end += 8
291       (_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs,) = _struct_2I\&.unpack(str[start:end])
292       start = end
293       end += 4
294       (length,) = _struct_I\&.unpack(str[start:end])
295       start = end
296       end += length
297       if python3:
298         self\&.status\&.goal_id\&.id = str[start:end]\&.decode('utf-8')
299       else:
300         self\&.status\&.goal_id\&.id = str[start:end]
301       start = end
302       end += 1
303       (self\&.status\&.status,) = _struct_B\&.unpack(str[start:end])
304       start = end
305       end += 4
306       (length,) = _struct_I\&.unpack(str[start:end])
307       start = end
308       end += length
309       if python3:
310         self\&.status\&.text = str[start:end]\&.decode('utf-8')
311       else:
312         self\&.status\&.text = str[start:end]
313       _x = self
314       start = end
315       end += 24
316       (_x\&.result\&.angles\&.joint1, _x\&.result\&.angles\&.joint2, _x\&.result\&.angles\&.joint3, _x\&.result\&.angles\&.joint4, _x\&.result\&.angles\&.joint5, _x\&.result\&.angles\&.joint6,) = _struct_6f\&.unpack(str[start:end])
317       return self
318     except struct\&.error as e:
319       raise genpy\&.DeserializationError(e) #most likely buffer underfill
320 
.fi
.SS "def jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.serialize ( self,  buff)"

.PP
.nf
serialize message into buffer
:param buff: buffer, ``StringIO``

.fi
.PP
 
.PP
.nf
132   def serialize(self, buff):
133     """
134     serialize message into buffer
135     :param buff: buffer, ``StringIO``
136     """
137     try:
138       _x = self
139       buff\&.write(_struct_3I\&.pack(_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs))
140       _x = self\&.header\&.frame_id
141       length = len(_x)
142       if python3 or type(_x) == unicode:
143         _x = _x\&.encode('utf-8')
144         length = len(_x)
145       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
146       _x = self
147       buff\&.write(_struct_2I\&.pack(_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs))
148       _x = self\&.status\&.goal_id\&.id
149       length = len(_x)
150       if python3 or type(_x) == unicode:
151         _x = _x\&.encode('utf-8')
152         length = len(_x)
153       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
154       buff\&.write(_struct_B\&.pack(self\&.status\&.status))
155       _x = self\&.status\&.text
156       length = len(_x)
157       if python3 or type(_x) == unicode:
158         _x = _x\&.encode('utf-8')
159         length = len(_x)
160       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
161       _x = self
162       buff\&.write(_struct_6f\&.pack(_x\&.result\&.angles\&.joint1, _x\&.result\&.angles\&.joint2, _x\&.result\&.angles\&.joint3, _x\&.result\&.angles\&.joint4, _x\&.result\&.angles\&.joint5, _x\&.result\&.angles\&.joint6))
163     except struct\&.error as se: self\&._check_types(struct\&.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
164     except TypeError as te: self\&._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))
165 
.fi
.SS "def jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.serialize_numpy ( self,  buff,  numpy)"

.PP
.nf
serialize message with numpy array types into buffer
:param buff: buffer, ``StringIO``
:param numpy: numpy python module

.fi
.PP
 
.PP
.nf
226   def serialize_numpy(self, buff, numpy):
227     """
228     serialize message with numpy array types into buffer
229     :param buff: buffer, ``StringIO``
230     :param numpy: numpy python module
231     """
232     try:
233       _x = self
234       buff\&.write(_struct_3I\&.pack(_x\&.header\&.seq, _x\&.header\&.stamp\&.secs, _x\&.header\&.stamp\&.nsecs))
235       _x = self\&.header\&.frame_id
236       length = len(_x)
237       if python3 or type(_x) == unicode:
238         _x = _x\&.encode('utf-8')
239         length = len(_x)
240       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
241       _x = self
242       buff\&.write(_struct_2I\&.pack(_x\&.status\&.goal_id\&.stamp\&.secs, _x\&.status\&.goal_id\&.stamp\&.nsecs))
243       _x = self\&.status\&.goal_id\&.id
244       length = len(_x)
245       if python3 or type(_x) == unicode:
246         _x = _x\&.encode('utf-8')
247         length = len(_x)
248       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
249       buff\&.write(_struct_B\&.pack(self\&.status\&.status))
250       _x = self\&.status\&.text
251       length = len(_x)
252       if python3 or type(_x) == unicode:
253         _x = _x\&.encode('utf-8')
254         length = len(_x)
255       buff\&.write(struct\&.pack('<I%ss'%length, length, _x))
256       _x = self
257       buff\&.write(_struct_6f\&.pack(_x\&.result\&.angles\&.joint1, _x\&.result\&.angles\&.joint2, _x\&.result\&.angles\&.joint3, _x\&.result\&.angles\&.joint4, _x\&.result\&.angles\&.joint5, _x\&.result\&.angles\&.joint6))
258     except struct\&.error as se: self\&._check_types(struct\&.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
259     except TypeError as te: self\&._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))
260 
.fi
.SH "Member Data Documentation"
.PP 
.SS "list jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.__slots__ = ['\fBheader\fP','\fBstatus\fP','\fBresult\fP']\fC [static]\fP, \fC [private]\fP"

.SS "string jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&._full_text\fC [static]\fP, \fC [private]\fP"

.SS "bool jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&._has_header = True\fC [static]\fP, \fC [private]\fP"

.SS "string jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&._md5sum = '1419c77c622a1f52ee6fc0926c8ae186'\fC [static]\fP, \fC [private]\fP"

.SS "list jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&._slot_types = ['std_msgs/Header','actionlib_msgs/GoalStatus','jaco_msgs/\fBArmJointAnglesResult\fP']\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&._get_types()\&.
.SS "string jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&._type = 'jaco_msgs/\fBArmJointAnglesActionResult\fP'\fC [static]\fP, \fC [private]\fP"

.SS "jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.header"

.PP
Referenced by jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.__init__(), jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize(), and jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.result"

.PP
Referenced by jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize(), and jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize_numpy()\&.
.SS "jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.status"

.PP
Referenced by jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize(), and jaco_msgs\&.msg\&._ArmJointAnglesActionResult\&.ArmJointAnglesActionResult\&.deserialize_numpy()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Kinova-ROS from the source code\&.
